<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- interface명칭과 xml의 명칭이 동일해야 한다 -->
<mapper namespace="kr.spring.board.dao.BoardMapper">
	<!-- 글 작성하기 -->
	<insert id="insertBoard" parameterType="boardVO">
		INSERT INTO
		spboard(
		board_num,
		category,
		title,
		content,
		reg_date,
		filename,
		ip,
		mem_num)
		VALUES(spboard_seq.nextval,
		#{category},
		#{title},
		#{content},
		SYSDATE,
		#{filename, jdbcType=VARCHAR},
		#{ip},
		#{mem_num})
	</insert>

	<!-- include를 사용할 수 있음(조각을 만들어서 붙이고 안 붙이고 가능함)조건 체크 할 때 좋을듯? -->
	<!-- sql 태그와 include 태그를 이용해서 SQL문을 재사용한다 -->
	<!-- 검색할 때 사용 -->
	<sql id="boardSearch">
		<where>
			<!-- 카테고리가 널이 아니고, 비어있지 않으면 -->
			<if test="category != null and category != ''">
				category = #{category}
			</if>

			<if test="keyword != null and keyword != ''">
				<!-- 카테고리가 있다면 AND로 연결시켜준다 -->
				<if test="category != null and category != ''">
					AND
				</if>
				<!-- keyfield가 1이면 제목에서 검색 -->
				<if test="keyfield == 1">
					title LIKE '%' || #{keyword} || '%'
				</if>
				<!-- keyfield가 2이면 아이디 또는 닉네임에서 검색 -->
				<if test="keyfield == 2">
					(id LIKE '%' || #{keyword} || '%' OR
					nick_name LIKE '%' || #{keyword} || '%')
				</if>
				<!-- keyfield가 3이면 내용에서 검색 -->
				<if test="keyfield == 3">
					content LIKE '%' || #{keyword} || '%'
				</if>
				<!-- keyfiled가 4이면 제목 또는 내용에서 검색 -->
				<if test="keyfield == 4">
					(title LIKE '%' || #{keyword} || '%' OR
					content LIKE '%' || #{keyword} || '%')
				</if>
			</if>
		</where>
	</sql>
	<!-- 정렬할 때 사용 -->
	<sql id="boardOrder">
		<!-- 게시글 번호 순 -->
		<if test="order == 1">
			ORDER BY board_num DESC
		</if>
		<!-- 조회수 순 -->
		<if test="order == 2">
			ORDER BY hit DESC
		</if>
		<!-- 좋아요 순으로 정렬하는데 NULL값은 맨 뒤로 가게 설정 -->
		<if test="order == 3">
			ORDER BY fav_cnt DESC NULLS LAST
		</if>
		<!-- 댓글수 순 -->
		<if test="order == 4">
			ORDER BY re_cnt DESC NULLS LAST
		</if>
	</sql>

	<!-- 게시판 글 총 레코드수/ 검색 레코드수 구하기 -->
	<select id="selectRowCount" parameterType="map"
		resultType="integer">
		SELECT COUNT(*) FROM spboard JOIN spmember USING(mem_num)
		<include refid="boardSearch"></include>
	</select>

	<!-- 게시판 전체 목록/ 검색 목록 -->
	<select id="selectList" parameterType="map" resultType="boardVO">
		SELECT * FROM (
			SELECT a.*, rownum rnum FROM (
				SELECT 
				board_num,
				<![CDATA[
				REPLACE(REPLACE(title,'<','&lt;'),'>','&gt;') title,
				]]>
				hit, filename, reg_date, mem_num, id, nick_name, re_cnt, fav_cnt
				FROM spboard 
				LEFT OUTER JOIN (SELECT COUNT(*) re_cnt, board_num FROM spboard_reply GROUP BY board_num) USING(board_num) 
				LEFT OUTER JOIN (SELECT COUNT(*) fav_cnt, board_num FROM spboard_fav GROUP BY board_num) USING(board_num)
				JOIN spmember USING(mem_num)
		<include refid="boardSearch"></include>
		<include refid="boardOrder"></include>)a)
		<![CDATA[WHERE rnum >= #{start} AND rnum <= #{end}]]>
	</select>

	<!-- 게시글 수정하기 -->
	<update id="updateBoard" parameterType="boardVO">
		UPDATE spboard SET
		<if test="filename != null">
			filename = #{filename},
		</if>
		title =#{title},
		content = #{content},
		ip = #{ip},
		modify_date = SYSDATE
		WHERE board_num = #{board_num}
	</update>
	
	
	
	<!-- 댓글 등록하기 -->
	<insert id="insertReply" parameterType="boardReplyVO">
	INSERT INTO spboard_reply(re_num, re_content, re_ip, board_num, mem_num) 
		VALUES(spboard_reply_seq.nextval, #{re_content}, #{re_ip}, #{board_num},#{mem_num})
	</insert>

	
	<!-- 댓글 목록 불러오기 -->
	<!-- 로그인한 상태에서 클릭한 사람의 정보 읽기, 로그인 하지 않으면 0을 전달한다. -->
	<select id="selectListReply" parameterType="map" resultType="boardReplyVO">
	SELECT * FROM (SELECT a.*, rownum rnum FROM ( 
		SELECT re_num, 	<![CDATA[REPLACE(REPLACE(re_content,'<','&lt;'),'>','&gt;') re_content,]]> re_date, re_mdate, board_num,mem_num,id,nick_name,click_num,refav_cnt,resp_cnt
			FROM spboard_reply JOIN spmember USING(mem_num)
			LEFT OUTER JOIN (SELECT re_num, mem_num click_num FROM spreply_fav WHERE mem_num=#{mem_num}) USING(re_num)
			LEFT OUTER JOIN (SELECT re_num, COUNT(*) refav_cnt FROM spreply_fav GROUP BY re_num) USING(re_num)
			LEFT OUTER JOIN (SELECT re_num, COUNT(*) resp_cnt FROM spboard_response GROUP BY re_num) USING(re_num)
			WHERE board_num=#{board_num} ORDER BY re_num DESC)a)
		<![CDATA[WHERE rnum >= #{start} AND rnum <= #{end}]]>
	</select>
	
	<!-- 답글 등록하기 -->
	<insert id="insertResponse" parameterType="boardResponseVO">
		INSERT INTO spboard_response(te_num, te_content, te_parent_num, te_depth, te_ip, re_num, mem_num) 
						VALUES(response_seq.nextval, #{te_content}, #{te_parent_num}, #{te_depth}, #{te_ip}, #{re_num}, #{mem_num})
	</insert>


	<select id="selectListResponse" parameterType="long" resultType="boardResponseVO">
		SELECT 
		r.te_num,
		r.te_content,
		r.mem_num,
		a.id,
		a.nick_name,
		r.te_date,
		r.te_ip,
		r.re_num,
		r.te_depth,
		r.te_parent_num,
		r.te_mdate,
		m.id parent_id,
		m.nick_name pnick_name
		FROM spboard_response r JOIN spmember a ON r.mem_num=a.mem_num
		LEFT OUTER JOIN spboard_response s ON r.te_parent_num = s.te_num
		LEFT OUTER JOIN spmember m ON s.mem_num=m.mem_num
		WHERE r.re_num = #{re_num}
		START WITh r.te_depth=0 CONNECT BY PRIOR r.te_num = r.te_parent_num ORDER SIBLINGS BY r.te_num DESC
	</select>
 	
 	<!-- 답글 삭제하기 -->
 	<delete id="deleteResponse" parameterType="long">
 	DELETE FROM spboard_response WHERE te_num IN(
 		SELECT te_num FROM spboard_response START WITH te_num=#{te_num}
 		CONNECT BY PRIOR te_num = te_parent_num
 	)
 	</delete>
</mapper>